/**
 * Bot Configuration Module
 * Handles all bot-related configuration settings
 */

const logger = require('../utils/logger');

class BotConfig {
    constructor() {
        // Bot Identity Settings
        this.name = process.env.BOT_NAME || 'Stream Beats';
        this.id = process.env.BOT_ID || 'Stream_BeatsBot';
        this.Owner = process.env.OWNER_NAME || 'Jkey_GameS';
        this.description = process.env.BOT_DESCRIPTION || 'A powerful music streaming & downloading bot for Telegram';
        this.version = process.env.BOT_VERSION || '1.0.0';

        // Feature Settings
        this.welcomeMessage = process.env.WELCOME_MESSAGE || null;
        this.adminUserId = process.env.ADMIN_USER_ID || null;
        this.enableLogging = process.env.ENABLE_LOGGING !== 'false';

        // Rate Limiting
        this.rateLimitCooldown = parseInt(process.env.RATE_LIMIT_COOLDOWN) || 1000; // 1 second
        this.maxEchoLength = parseInt(process.env.MAX_ECHO_LENGTH) || 500;

        // Commands Configuration
        this.enabledCommands = this.parseEnabledCommands();

        // Music-specific settings
        this.maxDownloadSize = parseInt(process.env.MAX_DOWNLOAD_SIZE) || 50 * 1024 * 1024; // 50MB
        this.maxQueueSize = parseInt(process.env.MAX_QUEUE_SIZE) || 100;
        this.defaultPlatform = process.env.DEFAULT_PLATFORM || 'youtube';

        logger.info('Bot configuration loaded:', {
            name: this.name,
            description: this.description,
            version: this.version,
            enabledCommands: this.enabledCommands
        });
    }

    parseEnabledCommands() {
        // ‚úÖ Default set includes BOTH normal commands and menu aliases
        const defaultCommands = [
            'start', 'help', 'ping', 'play', 'search', 'queue', 'skip', 'previous',
            'playlist', 'nowplaying', 'musicstats', 'config', 'time', 'chatinfo',
            'music', 'utility', 'searchmenu', 'chat',
            'playRequest', 'searchRequest', 'queueAdd', 'playlistCreate',
            'chatSupport', 'askHelp',
            // menu command aliases (so /menu_music works too)
            'menu_music', 'menu_settings', 'menu_playlists', 'menu_utility', 'menu_feedback', 'menu_leaderboard'
        ];

        const envCommands = process.env.ENABLED_COMMANDS;
        if (envCommands) {
            return envCommands.split(',').map(cmd => cmd.trim().toLowerCase());
        }
        return defaultCommands;
    }

    // Getters for easy access
    getName() { return this.name; }
    getDescription() { return this.description; }
    getVersion() { return this.version; }

    getWelcomeMessage(firstName = 'User') {
        if (this.welcomeMessage) {
            return this.welcomeMessage
                .replace('{name}', firstName)
                .replace('{bot_name}', this.name)
                .replace('{owner}', this.Owner);
        }

        return {
            text: `<blockquote>üê• ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á, ${firstName}, ·¥õ·¥è <b><a href="https://t.me/${this.id}">üéß Àπs·¥õÍùõ·¥á·¥Ä·¥ç  ô·¥á·¥Ä·¥õsÀº ü´ß</a></b> ‚Äî  è·¥è·¥ú Ä ·¥ç·¥ús…™·¥Ñ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ò·¥Ä…¥…™·¥è…¥ ·¥è…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç</blockquote>

<blockquote>‚ï≠‚òâÔ∏é <b>“ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás:</b>  
‚ûª ·¥ò ü·¥Ä è & ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö s·¥è…¥…¢s “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á & s·¥ò·¥è·¥õ…™Íú∞ è  
‚ûª  ú…™…¢ ú-«´·¥ú·¥Ä ü…™·¥õ è, 24/7  ü·¥Ä…¢-Íú∞ Ä·¥á·¥á ·¥Ä·¥ú·¥Ö…™·¥è  
‚ûª ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥Ä…¥·¥Ö s·¥Ä·¥†·¥á ·¥ò ü·¥Ä è ü…™s·¥õs  
‚ûª …¥·¥è ·¥Ä·¥Ös ·¥è Ä  ü…™·¥ç…™·¥õs ‚Äî ·¥ä·¥ús·¥õ ·¥ç·¥ús…™·¥Ñ  
‚ûª s…™·¥ç·¥ò ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös “ì·¥è Ä «´·¥ú…™·¥Ñ·¥ã ·¥Ñ·¥è…¥·¥õ Ä·¥è ü  
‚ûª ·¥Ä ü·¥°·¥Ä ès ·¥è…¥ ü…™…¥·¥á ·¥Ä…¥·¥Ö  Ä·¥á ü…™·¥Ä ô ü·¥á  

‚ï∞‚òâÔ∏é ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è <b><a href="https://t.me/${this.Owner}">·¥ä·¥ã·¥á è …¢·¥Ä·¥ç·¥ás</a></b> ‚ö°
</blockquote>`,
            keyboard: {
                inline_keyboard: [
                    [{ text: '‚ú® …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á ‚ú®', callback_data: 'menu_search' }],
                    [
                        { text: 'üéß ·¥ç·¥ús…™·¥Ñ', callback_data: 'menu_music' },
                        { text: 's·¥á·¥õ·¥õ…™…¥…¢s ‚öôÔ∏è', callback_data: '/menu_settings' }
                    ],
                    [{ text: '‚ûï ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ‚ûï', url: `https://t.me/${this.id}?startgroup=true` }]
                ]
            }
        };
    }

    getHelpMessage() {
        return `
üéµ ${this.name} - Complete Help Guide

**üé∂ MUSIC COMMANDS:**
‚Ä¢ \`/play <song name>\` - Search and play music
‚Ä¢ \`/play <youtube/spotify url>\` - Play from direct URL
‚Ä¢ \`/search <song name>\` - Search without downloading
‚Ä¢ \`/queue\` - Show current queue
‚Ä¢ \`/skip\` - Skip to next song
‚Ä¢ \`/previous\` - Play previous song
‚Ä¢ \`/repeat\` - Toggle repeat mode
‚Ä¢ \`/shuffle\` - Toggle shuffle mode
‚Ä¢ \`/clear\` - Clear current queue
‚Ä¢ \`/nowplaying\` - Show current track info

**üìù PLAYLIST MANAGEMENT:**
‚Ä¢ \`/playlist create <name>\` - Create new playlist
‚Ä¢ \`/playlist list\` - Show your playlists
‚Ä¢ \`/playlist show <name>\` - View playlist contents
‚Ä¢ \`/playlist play <name>\` - Load playlist to queue
‚Ä¢ \`/playlist delete <name>\` - Delete playlist

**‚ö° UTILITY COMMANDS:**
‚Ä¢ \`/start\` - Show welcome message
‚Ä¢ \`/help\` - Show this help
‚Ä¢ \`/ping\` - Test bot responsiveness
‚Ä¢ \`/config\` - Bot configuration
‚Ä¢ \`/musicstats\` - Music bot statistics
‚Ä¢ \`/time\` - Current server time
‚Ä¢ \`/chatinfo\` - Chat information
‚Ä¢ \`/menu_music\` - Open Music Menu
‚Ä¢ \`/menu_settings\` - Open Settings Menu

**üîó SUPPORTED PLATFORMS:**
‚Ä¢ YouTube (direct links & search)
‚Ä¢ Spotify (track links & search)
‚Ä¢ Automatic platform detection

**üì± WORKS IN:**
‚Ä¢ Private chats
‚Ä¢ Group chats
‚Ä¢ Channels (with proper permissions)

Bot Version: ${this.version} | Send music links or use /play!

**Note:** Bot needs proper permissions in groups/channels to send audio files.
        `;
    }

    isCommandEnabled(command) {
        return this.enabledCommands.includes(command.toLowerCase());
    }

    getRateLimitCooldown() { return this.rateLimitCooldown; }
    getMaxEchoLength() { return this.maxEchoLength; }
    getAdminUserId() { return this.adminUserId; }

    isAdmin(userId) {
        return this.adminUserId && parseInt(this.adminUserId) === parseInt(userId);
    }

    updateName(newName) {
        this.name = newName;
        logger.info(`Bot name updated to: ${newName}`);
    }

    updateDescription(newDescription) {
        this.description = newDescription;
        logger.info(`Bot description updated to: ${newDescription}`);
    }

    getBotInfo() {
        return {
            name: this.name,
            description: this.description,
            version: this.version,
            enabledCommands: this.enabledCommands,
            rateLimitCooldown: this.rateLimitCooldown,
            maxEchoLength: this.maxEchoLength
        };
    }
}

// Create and export singleton instance
const botConfig = new BotConfig();
module.exports = botConfig;